// AUTO-GENERATED USING zydis-bindgen!

/// Defines the `ZydisInstructionCategory` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum InstructionCategory {
    INVALID = 0,
    ADOX_ADCX = 1,
    AES = 2,
    AMD3DNOW = 3,
    AMX_TILE = 4,
    AVX = 5,
    AVX2 = 6,
    AVX2GATHER = 7,
    AVX512 = 8,
    AVX512_4FMAPS = 9,
    AVX512_4VNNIW = 10,
    AVX512_BITALG = 11,
    AVX512_VBMI = 12,
    AVX512_VP2INTERSECT = 13,
    BINARY = 14,
    BITBYTE = 15,
    BLEND = 16,
    BMI1 = 17,
    BMI2 = 18,
    BROADCAST = 19,
    CALL = 20,
    CET = 21,
    CLDEMOTE = 22,
    CLFLUSHOPT = 23,
    CLWB = 24,
    CLZERO = 25,
    CMOV = 26,
    COMPRESS = 27,
    COND_BR = 28,
    CONFLICT = 29,
    CONVERT = 30,
    DATAXFER = 31,
    DECIMAL = 32,
    ENQCMD = 33,
    EXPAND = 34,
    FCMOV = 35,
    FLAGOP = 36,
    FMA4 = 37,
    FP16 = 38,
    GATHER = 39,
    GFNI = 40,
    HRESET = 41,
    IFMA = 42,
    INTERRUPT = 43,
    IO = 44,
    IOSTRINGOP = 45,
    KEYLOCKER = 46,
    KEYLOCKER_WIDE = 47,
    KMASK = 48,
    KNC = 49,
    KNCMASK = 50,
    KNCSCALAR = 51,
    LEGACY = 52,
    LOGICAL = 53,
    LOGICAL_FP = 54,
    LZCNT = 55,
    MISC = 56,
    MMX = 57,
    MOVDIR = 58,
    MPX = 59,
    NOP = 60,
    PADLOCK = 61,
    PCLMULQDQ = 62,
    PCONFIG = 63,
    PKU = 64,
    POP = 65,
    PREFETCH = 66,
    PREFETCHWT1 = 67,
    PT = 68,
    PUSH = 69,
    RDPID = 70,
    RDPRU = 71,
    RDRAND = 72,
    RDSEED = 73,
    RDWRFSGS = 74,
    RET = 75,
    ROTATE = 76,
    SCATTER = 77,
    SEGOP = 78,
    SEMAPHORE = 79,
    SERIALIZE = 80,
    SETCC = 81,
    SGX = 82,
    SHA = 83,
    SHIFT = 84,
    SMAP = 85,
    SSE = 86,
    STRINGOP = 87,
    STTNI = 88,
    SYSCALL = 89,
    SYSRET = 90,
    SYSTEM = 91,
    TBM = 92,
    TSX_LDTRK = 93,
    UFMA = 94,
    UINTR = 95,
    UNCOND_BR = 96,
    VAES = 97,
    VBMI2 = 98,
    VEX = 99,
    VFMA = 100,
    VPCLMULQDQ = 101,
    VTX = 102,
    WAITPKG = 103,
    WIDENOP = 104,
    X87_ALU = 105,
    XOP = 106,
    XSAVE = 107,
    XSAVEOPT = 108,
}

pub const CATEGORY_MAX_VALUE: usize = 108;

/// Defines the `ZydisISASet` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum ISASet {
    INVALID = 0,
    ADOX_ADCX = 1,
    AES = 2,
    AMD = 3,
    AMD3DNOW = 4,
    AMD_INVLPGB = 5,
    AMX_BF16 = 6,
    AMX_INT8 = 7,
    AMX_TILE = 8,
    AVX = 9,
    AVX2 = 10,
    AVX2GATHER = 11,
    AVX512BW_128 = 12,
    AVX512BW_128N = 13,
    AVX512BW_256 = 14,
    AVX512BW_512 = 15,
    AVX512BW_KOP = 16,
    AVX512CD_128 = 17,
    AVX512CD_256 = 18,
    AVX512CD_512 = 19,
    AVX512DQ_128 = 20,
    AVX512DQ_128N = 21,
    AVX512DQ_256 = 22,
    AVX512DQ_512 = 23,
    AVX512DQ_KOP = 24,
    AVX512DQ_SCALAR = 25,
    AVX512ER_512 = 26,
    AVX512ER_SCALAR = 27,
    AVX512F_128 = 28,
    AVX512F_128N = 29,
    AVX512F_256 = 30,
    AVX512F_512 = 31,
    AVX512F_KOP = 32,
    AVX512F_SCALAR = 33,
    AVX512PF_512 = 34,
    AVX512_4FMAPS_512 = 35,
    AVX512_4FMAPS_SCALAR = 36,
    AVX512_4VNNIW_512 = 37,
    AVX512_BF16_128 = 38,
    AVX512_BF16_256 = 39,
    AVX512_BF16_512 = 40,
    AVX512_BITALG_128 = 41,
    AVX512_BITALG_256 = 42,
    AVX512_BITALG_512 = 43,
    AVX512_FP16_128 = 44,
    AVX512_FP16_128N = 45,
    AVX512_FP16_256 = 46,
    AVX512_FP16_512 = 47,
    AVX512_FP16_SCALAR = 48,
    AVX512_GFNI_128 = 49,
    AVX512_GFNI_256 = 50,
    AVX512_GFNI_512 = 51,
    AVX512_IFMA_128 = 52,
    AVX512_IFMA_256 = 53,
    AVX512_IFMA_512 = 54,
    AVX512_VAES_128 = 55,
    AVX512_VAES_256 = 56,
    AVX512_VAES_512 = 57,
    AVX512_VBMI2_128 = 58,
    AVX512_VBMI2_256 = 59,
    AVX512_VBMI2_512 = 60,
    AVX512_VBMI_128 = 61,
    AVX512_VBMI_256 = 62,
    AVX512_VBMI_512 = 63,
    AVX512_VNNI_128 = 64,
    AVX512_VNNI_256 = 65,
    AVX512_VNNI_512 = 66,
    AVX512_VP2INTERSECT_128 = 67,
    AVX512_VP2INTERSECT_256 = 68,
    AVX512_VP2INTERSECT_512 = 69,
    AVX512_VPCLMULQDQ_128 = 70,
    AVX512_VPCLMULQDQ_256 = 71,
    AVX512_VPCLMULQDQ_512 = 72,
    AVX512_VPOPCNTDQ_128 = 73,
    AVX512_VPOPCNTDQ_256 = 74,
    AVX512_VPOPCNTDQ_512 = 75,
    AVXAES = 76,
    AVX_GFNI = 77,
    AVX_VNNI = 78,
    BMI1 = 79,
    BMI2 = 80,
    CET = 81,
    CLDEMOTE = 82,
    CLFLUSHOPT = 83,
    CLFSH = 84,
    CLWB = 85,
    CLZERO = 86,
    CMOV = 87,
    CMPXCHG16B = 88,
    ENQCMD = 89,
    F16C = 90,
    FAT_NOP = 91,
    FCMOV = 92,
    FMA = 93,
    FMA4 = 94,
    FXSAVE = 95,
    FXSAVE64 = 96,
    GFNI = 97,
    HRESET = 98,
    I186 = 99,
    I286PROTECTED = 100,
    I286REAL = 101,
    I386 = 102,
    I486 = 103,
    I486REAL = 104,
    I86 = 105,
    INVPCID = 106,
    KEYLOCKER = 107,
    KEYLOCKER_WIDE = 108,
    KNCE = 109,
    KNCJKBR = 110,
    KNCSTREAM = 111,
    KNCV = 112,
    KNC_MISC = 113,
    KNC_PF_HINT = 114,
    LAHF = 115,
    LONGMODE = 116,
    LWP = 117,
    LZCNT = 118,
    MCOMMIT = 119,
    MONITOR = 120,
    MONITORX = 121,
    MOVBE = 122,
    MOVDIR = 123,
    MPX = 124,
    PADLOCK_ACE = 125,
    PADLOCK_PHE = 126,
    PADLOCK_PMM = 127,
    PADLOCK_RNG = 128,
    PAUSE = 129,
    PCLMULQDQ = 130,
    PCONFIG = 131,
    PENTIUMMMX = 132,
    PENTIUMREAL = 133,
    PKU = 134,
    POPCNT = 135,
    PPRO = 136,
    PREFETCHWT1 = 137,
    PREFETCH_NOP = 138,
    PT = 139,
    RDPID = 140,
    RDPMC = 141,
    RDPRU = 142,
    RDRAND = 143,
    RDSEED = 144,
    RDTSCP = 145,
    RDWRFSGS = 146,
    RTM = 147,
    SERIALIZE = 148,
    SGX = 149,
    SGX_ENCLV = 150,
    SHA = 151,
    SMAP = 152,
    SMX = 153,
    SNP = 154,
    SSE = 155,
    SSE2 = 156,
    SSE2MMX = 157,
    SSE3 = 158,
    SSE3X87 = 159,
    SSE4 = 160,
    SSE42 = 161,
    SSE4A = 162,
    SSEMXCSR = 163,
    SSE_PREFETCH = 164,
    SSSE3 = 165,
    SSSE3MMX = 166,
    SVM = 167,
    TBM = 168,
    TDX = 169,
    TSX_LDTRK = 170,
    UINTR = 171,
    VAES = 172,
    VMFUNC = 173,
    VPCLMULQDQ = 174,
    VTX = 175,
    WAITPKG = 176,
    X87 = 177,
    XOP = 178,
    XSAVE = 179,
    XSAVEC = 180,
    XSAVEOPT = 181,
    XSAVES = 182,
}

pub const ISA_SET_MAX_VALUE: usize = 182;

/// Defines the `ZydisISAExt` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum ISAExt {
    INVALID = 0,
    ADOX_ADCX = 1,
    AES = 2,
    AMD3DNOW = 3,
    AMD3DNOW_PREFETCH = 4,
    AMD_INVLPGB = 5,
    AMX_BF16 = 6,
    AMX_INT8 = 7,
    AMX_TILE = 8,
    AVX = 9,
    AVX2 = 10,
    AVX2GATHER = 11,
    AVX512EVEX = 12,
    AVX512VEX = 13,
    AVXAES = 14,
    AVX_VNNI = 15,
    BASE = 16,
    BMI1 = 17,
    BMI2 = 18,
    CET = 19,
    CLDEMOTE = 20,
    CLFLUSHOPT = 21,
    CLFSH = 22,
    CLWB = 23,
    CLZERO = 24,
    ENQCMD = 25,
    F16C = 26,
    FMA = 27,
    FMA4 = 28,
    GFNI = 29,
    HRESET = 30,
    INVPCID = 31,
    KEYLOCKER = 32,
    KEYLOCKER_WIDE = 33,
    KNC = 34,
    KNCE = 35,
    KNCV = 36,
    LONGMODE = 37,
    LZCNT = 38,
    MCOMMIT = 39,
    MMX = 40,
    MONITOR = 41,
    MONITORX = 42,
    MOVBE = 43,
    MOVDIR = 44,
    MPX = 45,
    PADLOCK = 46,
    PAUSE = 47,
    PCLMULQDQ = 48,
    PCONFIG = 49,
    PKU = 50,
    PREFETCHWT1 = 51,
    PT = 52,
    RDPID = 53,
    RDPRU = 54,
    RDRAND = 55,
    RDSEED = 56,
    RDTSCP = 57,
    RDWRFSGS = 58,
    RTM = 59,
    SERIALIZE = 60,
    SGX = 61,
    SGX_ENCLV = 62,
    SHA = 63,
    SMAP = 64,
    SMX = 65,
    SNP = 66,
    SSE = 67,
    SSE2 = 68,
    SSE3 = 69,
    SSE4 = 70,
    SSE4A = 71,
    SSSE3 = 72,
    SVM = 73,
    TBM = 74,
    TDX = 75,
    TSX_LDTRK = 76,
    UINTR = 77,
    VAES = 78,
    VMFUNC = 79,
    VPCLMULQDQ = 80,
    VTX = 81,
    WAITPKG = 82,
    X87 = 83,
    XOP = 84,
    XSAVE = 85,
    XSAVEC = 86,
    XSAVEOPT = 87,
    XSAVES = 88,
}

pub const ISA_EXT_MAX_VALUE: usize = 88;

/// Defines the `ZydisMnemonic` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum Mnemonic {
    INVALID = 0,
    AAA = 1,
    AAD = 2,
    AAM = 3,
    AAS = 4,
    ADC = 5,
    ADCX = 6,
    ADD = 7,
    ADDPD = 8,
    ADDPS = 9,
    ADDSD = 10,
    ADDSS = 11,
    ADDSUBPD = 12,
    ADDSUBPS = 13,
    ADOX = 14,
    AESDEC = 15,
    AESDEC128KL = 16,
    AESDEC256KL = 17,
    AESDECLAST = 18,
    AESDECWIDE128KL = 19,
    AESDECWIDE256KL = 20,
    AESENC = 21,
    AESENC128KL = 22,
    AESENC256KL = 23,
    AESENCLAST = 24,
    AESENCWIDE128KL = 25,
    AESENCWIDE256KL = 26,
    AESIMC = 27,
    AESKEYGENASSIST = 28,
    AND = 29,
    ANDN = 30,
    ANDNPD = 31,
    ANDNPS = 32,
    ANDPD = 33,
    ANDPS = 34,
    ARPL = 35,
    BEXTR = 36,
    BLCFILL = 37,
    BLCI = 38,
    BLCIC = 39,
    BLCMSK = 40,
    BLCS = 41,
    BLENDPD = 42,
    BLENDPS = 43,
    BLENDVPD = 44,
    BLENDVPS = 45,
    BLSFILL = 46,
    BLSI = 47,
    BLSIC = 48,
    BLSMSK = 49,
    BLSR = 50,
    BNDCL = 51,
    BNDCN = 52,
    BNDCU = 53,
    BNDLDX = 54,
    BNDMK = 55,
    BNDMOV = 56,
    BNDSTX = 57,
    BOUND = 58,
    BSF = 59,
    BSR = 60,
    BSWAP = 61,
    BT = 62,
    BTC = 63,
    BTR = 64,
    BTS = 65,
    BZHI = 66,
    CALL = 67,
    CBW = 68,
    CDQ = 69,
    CDQE = 70,
    CLAC = 71,
    CLC = 72,
    CLD = 73,
    CLDEMOTE = 74,
    CLEVICT0 = 75,
    CLEVICT1 = 76,
    CLFLUSH = 77,
    CLFLUSHOPT = 78,
    CLGI = 79,
    CLI = 80,
    CLRSSBSY = 81,
    CLTS = 82,
    CLUI = 83,
    CLWB = 84,
    CLZERO = 85,
    CMC = 86,
    CMOVB = 87,
    CMOVBE = 88,
    CMOVL = 89,
    CMOVLE = 90,
    CMOVNB = 91,
    CMOVNBE = 92,
    CMOVNL = 93,
    CMOVNLE = 94,
    CMOVNO = 95,
    CMOVNP = 96,
    CMOVNS = 97,
    CMOVNZ = 98,
    CMOVO = 99,
    CMOVP = 100,
    CMOVS = 101,
    CMOVZ = 102,
    CMP = 103,
    CMPPD = 104,
    CMPPS = 105,
    CMPSB = 106,
    CMPSD = 107,
    CMPSQ = 108,
    CMPSS = 109,
    CMPSW = 110,
    CMPXCHG = 111,
    CMPXCHG16B = 112,
    CMPXCHG8B = 113,
    COMISD = 114,
    COMISS = 115,
    CPUID = 116,
    CQO = 117,
    CRC32 = 118,
    CVTDQ2PD = 119,
    CVTDQ2PS = 120,
    CVTPD2DQ = 121,
    CVTPD2PI = 122,
    CVTPD2PS = 123,
    CVTPI2PD = 124,
    CVTPI2PS = 125,
    CVTPS2DQ = 126,
    CVTPS2PD = 127,
    CVTPS2PI = 128,
    CVTSD2SI = 129,
    CVTSD2SS = 130,
    CVTSI2SD = 131,
    CVTSI2SS = 132,
    CVTSS2SD = 133,
    CVTSS2SI = 134,
    CVTTPD2DQ = 135,
    CVTTPD2PI = 136,
    CVTTPS2DQ = 137,
    CVTTPS2PI = 138,
    CVTTSD2SI = 139,
    CVTTSS2SI = 140,
    CWD = 141,
    CWDE = 142,
    DAA = 143,
    DAS = 144,
    DEC = 145,
    DELAY = 146,
    DIV = 147,
    DIVPD = 148,
    DIVPS = 149,
    DIVSD = 150,
    DIVSS = 151,
    DPPD = 152,
    DPPS = 153,
    EMMS = 154,
    ENCLS = 155,
    ENCLU = 156,
    ENCLV = 157,
    ENCODEKEY128 = 158,
    ENCODEKEY256 = 159,
    ENDBR32 = 160,
    ENDBR64 = 161,
    ENQCMD = 162,
    ENQCMDS = 163,
    ENTER = 164,
    EXTRACTPS = 165,
    EXTRQ = 166,
    F2XM1 = 167,
    FABS = 168,
    FADD = 169,
    FADDP = 170,
    FBLD = 171,
    FBSTP = 172,
    FCHS = 173,
    FCMOVB = 174,
    FCMOVBE = 175,
    FCMOVE = 176,
    FCMOVNB = 177,
    FCMOVNBE = 178,
    FCMOVNE = 179,
    FCMOVNU = 180,
    FCMOVU = 181,
    FCOM = 182,
    FCOMI = 183,
    FCOMIP = 184,
    FCOMP = 185,
    FCOMPP = 186,
    FCOS = 187,
    FDECSTP = 188,
    FDISI8087_NOP = 189,
    FDIV = 190,
    FDIVP = 191,
    FDIVR = 192,
    FDIVRP = 193,
    FEMMS = 194,
    FENI8087_NOP = 195,
    FFREE = 196,
    FFREEP = 197,
    FIADD = 198,
    FICOM = 199,
    FICOMP = 200,
    FIDIV = 201,
    FIDIVR = 202,
    FILD = 203,
    FIMUL = 204,
    FINCSTP = 205,
    FIST = 206,
    FISTP = 207,
    FISTTP = 208,
    FISUB = 209,
    FISUBR = 210,
    FLD = 211,
    FLD1 = 212,
    FLDCW = 213,
    FLDENV = 214,
    FLDL2E = 215,
    FLDL2T = 216,
    FLDLG2 = 217,
    FLDLN2 = 218,
    FLDPI = 219,
    FLDZ = 220,
    FMUL = 221,
    FMULP = 222,
    FNCLEX = 223,
    FNINIT = 224,
    FNOP = 225,
    FNSAVE = 226,
    FNSTCW = 227,
    FNSTENV = 228,
    FNSTSW = 229,
    FPATAN = 230,
    FPREM = 231,
    FPREM1 = 232,
    FPTAN = 233,
    FRNDINT = 234,
    FRSTOR = 235,
    FSCALE = 236,
    FSETPM287_NOP = 237,
    FSIN = 238,
    FSINCOS = 239,
    FSQRT = 240,
    FST = 241,
    FSTP = 242,
    FSTPNCE = 243,
    FSUB = 244,
    FSUBP = 245,
    FSUBR = 246,
    FSUBRP = 247,
    FTST = 248,
    FUCOM = 249,
    FUCOMI = 250,
    FUCOMIP = 251,
    FUCOMP = 252,
    FUCOMPP = 253,
    FWAIT = 254,
    FXAM = 255,
    FXCH = 256,
    FXRSTOR = 257,
    FXRSTOR64 = 258,
    FXSAVE = 259,
    FXSAVE64 = 260,
    FXTRACT = 261,
    FYL2X = 262,
    FYL2XP1 = 263,
    GETSEC = 264,
    GF2P8AFFINEINVQB = 265,
    GF2P8AFFINEQB = 266,
    GF2P8MULB = 267,
    HADDPD = 268,
    HADDPS = 269,
    HLT = 270,
    HRESET = 271,
    HSUBPD = 272,
    HSUBPS = 273,
    IDIV = 274,
    IMUL = 275,
    IN = 276,
    INC = 277,
    INCSSPD = 278,
    INCSSPQ = 279,
    INSB = 280,
    INSD = 281,
    INSERTPS = 282,
    INSERTQ = 283,
    INSW = 284,
    INT = 285,
    INT1 = 286,
    INT3 = 287,
    INTO = 288,
    INVD = 289,
    INVEPT = 290,
    INVLPG = 291,
    INVLPGA = 292,
    INVLPGB = 293,
    INVPCID = 294,
    INVVPID = 295,
    IRET = 296,
    IRETD = 297,
    IRETQ = 298,
    JB = 299,
    JBE = 300,
    JCXZ = 301,
    JECXZ = 302,
    JKNZD = 303,
    JKZD = 304,
    JL = 305,
    JLE = 306,
    JMP = 307,
    JNB = 308,
    JNBE = 309,
    JNL = 310,
    JNLE = 311,
    JNO = 312,
    JNP = 313,
    JNS = 314,
    JNZ = 315,
    JO = 316,
    JP = 317,
    JRCXZ = 318,
    JS = 319,
    JZ = 320,
    KADDB = 321,
    KADDD = 322,
    KADDQ = 323,
    KADDW = 324,
    KAND = 325,
    KANDB = 326,
    KANDD = 327,
    KANDN = 328,
    KANDNB = 329,
    KANDND = 330,
    KANDNQ = 331,
    KANDNR = 332,
    KANDNW = 333,
    KANDQ = 334,
    KANDW = 335,
    KCONCATH = 336,
    KCONCATL = 337,
    KEXTRACT = 338,
    KMERGE2L1H = 339,
    KMERGE2L1L = 340,
    KMOV = 341,
    KMOVB = 342,
    KMOVD = 343,
    KMOVQ = 344,
    KMOVW = 345,
    KNOT = 346,
    KNOTB = 347,
    KNOTD = 348,
    KNOTQ = 349,
    KNOTW = 350,
    KOR = 351,
    KORB = 352,
    KORD = 353,
    KORQ = 354,
    KORTEST = 355,
    KORTESTB = 356,
    KORTESTD = 357,
    KORTESTQ = 358,
    KORTESTW = 359,
    KORW = 360,
    KSHIFTLB = 361,
    KSHIFTLD = 362,
    KSHIFTLQ = 363,
    KSHIFTLW = 364,
    KSHIFTRB = 365,
    KSHIFTRD = 366,
    KSHIFTRQ = 367,
    KSHIFTRW = 368,
    KTESTB = 369,
    KTESTD = 370,
    KTESTQ = 371,
    KTESTW = 372,
    KUNPCKBW = 373,
    KUNPCKDQ = 374,
    KUNPCKWD = 375,
    KXNOR = 376,
    KXNORB = 377,
    KXNORD = 378,
    KXNORQ = 379,
    KXNORW = 380,
    KXOR = 381,
    KXORB = 382,
    KXORD = 383,
    KXORQ = 384,
    KXORW = 385,
    LAHF = 386,
    LAR = 387,
    LDDQU = 388,
    LDMXCSR = 389,
    LDS = 390,
    LDTILECFG = 391,
    LEA = 392,
    LEAVE = 393,
    LES = 394,
    LFENCE = 395,
    LFS = 396,
    LGDT = 397,
    LGS = 398,
    LIDT = 399,
    LLDT = 400,
    LLWPCB = 401,
    LMSW = 402,
    LOADIWKEY = 403,
    LODSB = 404,
    LODSD = 405,
    LODSQ = 406,
    LODSW = 407,
    LOOP = 408,
    LOOPE = 409,
    LOOPNE = 410,
    LSL = 411,
    LSS = 412,
    LTR = 413,
    LWPINS = 414,
    LWPVAL = 415,
    LZCNT = 416,
    MASKMOVDQU = 417,
    MASKMOVQ = 418,
    MAXPD = 419,
    MAXPS = 420,
    MAXSD = 421,
    MAXSS = 422,
    MCOMMIT = 423,
    MFENCE = 424,
    MINPD = 425,
    MINPS = 426,
    MINSD = 427,
    MINSS = 428,
    MONITOR = 429,
    MONITORX = 430,
    MONTMUL = 431,
    MOV = 432,
    MOVAPD = 433,
    MOVAPS = 434,
    MOVBE = 435,
    MOVD = 436,
    MOVDDUP = 437,
    MOVDIR64B = 438,
    MOVDIRI = 439,
    MOVDQ2Q = 440,
    MOVDQA = 441,
    MOVDQU = 442,
    MOVHLPS = 443,
    MOVHPD = 444,
    MOVHPS = 445,
    MOVLHPS = 446,
    MOVLPD = 447,
    MOVLPS = 448,
    MOVMSKPD = 449,
    MOVMSKPS = 450,
    MOVNTDQ = 451,
    MOVNTDQA = 452,
    MOVNTI = 453,
    MOVNTPD = 454,
    MOVNTPS = 455,
    MOVNTQ = 456,
    MOVNTSD = 457,
    MOVNTSS = 458,
    MOVQ = 459,
    MOVQ2DQ = 460,
    MOVSB = 461,
    MOVSD = 462,
    MOVSHDUP = 463,
    MOVSLDUP = 464,
    MOVSQ = 465,
    MOVSS = 466,
    MOVSW = 467,
    MOVSX = 468,
    MOVSXD = 469,
    MOVUPD = 470,
    MOVUPS = 471,
    MOVZX = 472,
    MPSADBW = 473,
    MUL = 474,
    MULPD = 475,
    MULPS = 476,
    MULSD = 477,
    MULSS = 478,
    MULX = 479,
    MWAIT = 480,
    MWAITX = 481,
    NEG = 482,
    NOP = 483,
    NOT = 484,
    OR = 485,
    ORPD = 486,
    ORPS = 487,
    OUT = 488,
    OUTSB = 489,
    OUTSD = 490,
    OUTSW = 491,
    PABSB = 492,
    PABSD = 493,
    PABSW = 494,
    PACKSSDW = 495,
    PACKSSWB = 496,
    PACKUSDW = 497,
    PACKUSWB = 498,
    PADDB = 499,
    PADDD = 500,
    PADDQ = 501,
    PADDSB = 502,
    PADDSW = 503,
    PADDUSB = 504,
    PADDUSW = 505,
    PADDW = 506,
    PALIGNR = 507,
    PAND = 508,
    PANDN = 509,
    PAUSE = 510,
    PAVGB = 511,
    PAVGUSB = 512,
    PAVGW = 513,
    PBLENDVB = 514,
    PBLENDW = 515,
    PCLMULQDQ = 516,
    PCMPEQB = 517,
    PCMPEQD = 518,
    PCMPEQQ = 519,
    PCMPEQW = 520,
    PCMPESTRI = 521,
    PCMPESTRM = 522,
    PCMPGTB = 523,
    PCMPGTD = 524,
    PCMPGTQ = 525,
    PCMPGTW = 526,
    PCMPISTRI = 527,
    PCMPISTRM = 528,
    PCONFIG = 529,
    PDEP = 530,
    PEXT = 531,
    PEXTRB = 532,
    PEXTRD = 533,
    PEXTRQ = 534,
    PEXTRW = 535,
    PF2ID = 536,
    PF2IW = 537,
    PFACC = 538,
    PFADD = 539,
    PFCMPEQ = 540,
    PFCMPGE = 541,
    PFCMPGT = 542,
    PFCPIT1 = 543,
    PFMAX = 544,
    PFMIN = 545,
    PFMUL = 546,
    PFNACC = 547,
    PFPNACC = 548,
    PFRCP = 549,
    PFRCPIT2 = 550,
    PFRSQIT1 = 551,
    PFSQRT = 552,
    PFSUB = 553,
    PFSUBR = 554,
    PHADDD = 555,
    PHADDSW = 556,
    PHADDW = 557,
    PHMINPOSUW = 558,
    PHSUBD = 559,
    PHSUBSW = 560,
    PHSUBW = 561,
    PI2FD = 562,
    PI2FW = 563,
    PINSRB = 564,
    PINSRD = 565,
    PINSRQ = 566,
    PINSRW = 567,
    PMADDUBSW = 568,
    PMADDWD = 569,
    PMAXSB = 570,
    PMAXSD = 571,
    PMAXSW = 572,
    PMAXUB = 573,
    PMAXUD = 574,
    PMAXUW = 575,
    PMINSB = 576,
    PMINSD = 577,
    PMINSW = 578,
    PMINUB = 579,
    PMINUD = 580,
    PMINUW = 581,
    PMOVMSKB = 582,
    PMOVSXBD = 583,
    PMOVSXBQ = 584,
    PMOVSXBW = 585,
    PMOVSXDQ = 586,
    PMOVSXWD = 587,
    PMOVSXWQ = 588,
    PMOVZXBD = 589,
    PMOVZXBQ = 590,
    PMOVZXBW = 591,
    PMOVZXDQ = 592,
    PMOVZXWD = 593,
    PMOVZXWQ = 594,
    PMULDQ = 595,
    PMULHRSW = 596,
    PMULHRW = 597,
    PMULHUW = 598,
    PMULHW = 599,
    PMULLD = 600,
    PMULLW = 601,
    PMULUDQ = 602,
    POP = 603,
    POPA = 604,
    POPAD = 605,
    POPCNT = 606,
    POPF = 607,
    POPFD = 608,
    POPFQ = 609,
    POR = 610,
    PREFETCH = 611,
    PREFETCHNTA = 612,
    PREFETCHT0 = 613,
    PREFETCHT1 = 614,
    PREFETCHT2 = 615,
    PREFETCHW = 616,
    PREFETCHWT1 = 617,
    PSADBW = 618,
    PSHUFB = 619,
    PSHUFD = 620,
    PSHUFHW = 621,
    PSHUFLW = 622,
    PSHUFW = 623,
    PSIGNB = 624,
    PSIGND = 625,
    PSIGNW = 626,
    PSLLD = 627,
    PSLLDQ = 628,
    PSLLQ = 629,
    PSLLW = 630,
    PSMASH = 631,
    PSRAD = 632,
    PSRAW = 633,
    PSRLD = 634,
    PSRLDQ = 635,
    PSRLQ = 636,
    PSRLW = 637,
    PSUBB = 638,
    PSUBD = 639,
    PSUBQ = 640,
    PSUBSB = 641,
    PSUBSW = 642,
    PSUBUSB = 643,
    PSUBUSW = 644,
    PSUBW = 645,
    PSWAPD = 646,
    PTEST = 647,
    PTWRITE = 648,
    PUNPCKHBW = 649,
    PUNPCKHDQ = 650,
    PUNPCKHQDQ = 651,
    PUNPCKHWD = 652,
    PUNPCKLBW = 653,
    PUNPCKLDQ = 654,
    PUNPCKLQDQ = 655,
    PUNPCKLWD = 656,
    PUSH = 657,
    PUSHA = 658,
    PUSHAD = 659,
    PUSHF = 660,
    PUSHFD = 661,
    PUSHFQ = 662,
    PVALIDATE = 663,
    PXOR = 664,
    RCL = 665,
    RCPPS = 666,
    RCPSS = 667,
    RCR = 668,
    RDFSBASE = 669,
    RDGSBASE = 670,
    RDMSR = 671,
    RDPID = 672,
    RDPKRU = 673,
    RDPMC = 674,
    RDPRU = 675,
    RDRAND = 676,
    RDSEED = 677,
    RDSSPD = 678,
    RDSSPQ = 679,
    RDTSC = 680,
    RDTSCP = 681,
    RET = 682,
    RMPADJUST = 683,
    RMPUPDATE = 684,
    ROL = 685,
    ROR = 686,
    RORX = 687,
    ROUNDPD = 688,
    ROUNDPS = 689,
    ROUNDSD = 690,
    ROUNDSS = 691,
    RSM = 692,
    RSQRTPS = 693,
    RSQRTSS = 694,
    RSTORSSP = 695,
    SAHF = 696,
    SALC = 697,
    SAR = 698,
    SARX = 699,
    SAVEPREVSSP = 700,
    SBB = 701,
    SCASB = 702,
    SCASD = 703,
    SCASQ = 704,
    SCASW = 705,
    SEAMCALL = 706,
    SEAMOPS = 707,
    SEAMRET = 708,
    SENDUIPI = 709,
    SERIALIZE = 710,
    SETB = 711,
    SETBE = 712,
    SETL = 713,
    SETLE = 714,
    SETNB = 715,
    SETNBE = 716,
    SETNL = 717,
    SETNLE = 718,
    SETNO = 719,
    SETNP = 720,
    SETNS = 721,
    SETNZ = 722,
    SETO = 723,
    SETP = 724,
    SETS = 725,
    SETSSBSY = 726,
    SETZ = 727,
    SFENCE = 728,
    SGDT = 729,
    SHA1MSG1 = 730,
    SHA1MSG2 = 731,
    SHA1NEXTE = 732,
    SHA1RNDS4 = 733,
    SHA256MSG1 = 734,
    SHA256MSG2 = 735,
    SHA256RNDS2 = 736,
    SHL = 737,
    SHLD = 738,
    SHLX = 739,
    SHR = 740,
    SHRD = 741,
    SHRX = 742,
    SHUFPD = 743,
    SHUFPS = 744,
    SIDT = 745,
    SKINIT = 746,
    SLDT = 747,
    SLWPCB = 748,
    SMSW = 749,
    SPFLT = 750,
    SQRTPD = 751,
    SQRTPS = 752,
    SQRTSD = 753,
    SQRTSS = 754,
    STAC = 755,
    STC = 756,
    STD = 757,
    STGI = 758,
    STI = 759,
    STMXCSR = 760,
    STOSB = 761,
    STOSD = 762,
    STOSQ = 763,
    STOSW = 764,
    STR = 765,
    STTILECFG = 766,
    STUI = 767,
    SUB = 768,
    SUBPD = 769,
    SUBPS = 770,
    SUBSD = 771,
    SUBSS = 772,
    SWAPGS = 773,
    SYSCALL = 774,
    SYSENTER = 775,
    SYSEXIT = 776,
    SYSRET = 777,
    T1MSKC = 778,
    TDCALL = 779,
    TDPBF16PS = 780,
    TDPBSSD = 781,
    TDPBSUD = 782,
    TDPBUSD = 783,
    TDPBUUD = 784,
    TEST = 785,
    TESTUI = 786,
    TILELOADD = 787,
    TILELOADDT1 = 788,
    TILERELEASE = 789,
    TILESTORED = 790,
    TILEZERO = 791,
    TLBSYNC = 792,
    TPAUSE = 793,
    TZCNT = 794,
    TZCNTI = 795,
    TZMSK = 796,
    UCOMISD = 797,
    UCOMISS = 798,
    UD0 = 799,
    UD1 = 800,
    UD2 = 801,
    UIRET = 802,
    UMONITOR = 803,
    UMWAIT = 804,
    UNPCKHPD = 805,
    UNPCKHPS = 806,
    UNPCKLPD = 807,
    UNPCKLPS = 808,
    V4FMADDPS = 809,
    V4FMADDSS = 810,
    V4FNMADDPS = 811,
    V4FNMADDSS = 812,
    VADDNPD = 813,
    VADDNPS = 814,
    VADDPD = 815,
    VADDPH = 816,
    VADDPS = 817,
    VADDSD = 818,
    VADDSETSPS = 819,
    VADDSH = 820,
    VADDSS = 821,
    VADDSUBPD = 822,
    VADDSUBPS = 823,
    VAESDEC = 824,
    VAESDECLAST = 825,
    VAESENC = 826,
    VAESENCLAST = 827,
    VAESIMC = 828,
    VAESKEYGENASSIST = 829,
    VALIGND = 830,
    VALIGNQ = 831,
    VANDNPD = 832,
    VANDNPS = 833,
    VANDPD = 834,
    VANDPS = 835,
    VBLENDMPD = 836,
    VBLENDMPS = 837,
    VBLENDPD = 838,
    VBLENDPS = 839,
    VBLENDVPD = 840,
    VBLENDVPS = 841,
    VBROADCASTF128 = 842,
    VBROADCASTF32X2 = 843,
    VBROADCASTF32X4 = 844,
    VBROADCASTF32X8 = 845,
    VBROADCASTF64X2 = 846,
    VBROADCASTF64X4 = 847,
    VBROADCASTI128 = 848,
    VBROADCASTI32X2 = 849,
    VBROADCASTI32X4 = 850,
    VBROADCASTI32X8 = 851,
    VBROADCASTI64X2 = 852,
    VBROADCASTI64X4 = 853,
    VBROADCASTSD = 854,
    VBROADCASTSS = 855,
    VCMPPD = 856,
    VCMPPH = 857,
    VCMPPS = 858,
    VCMPSD = 859,
    VCMPSH = 860,
    VCMPSS = 861,
    VCOMISD = 862,
    VCOMISH = 863,
    VCOMISS = 864,
    VCOMPRESSPD = 865,
    VCOMPRESSPS = 866,
    VCVTDQ2PD = 867,
    VCVTDQ2PH = 868,
    VCVTDQ2PS = 869,
    VCVTFXPNTDQ2PS = 870,
    VCVTFXPNTPD2DQ = 871,
    VCVTFXPNTPD2UDQ = 872,
    VCVTFXPNTPS2DQ = 873,
    VCVTFXPNTPS2UDQ = 874,
    VCVTFXPNTUDQ2PS = 875,
    VCVTNE2PS2BF16 = 876,
    VCVTNEPS2BF16 = 877,
    VCVTPD2DQ = 878,
    VCVTPD2PH = 879,
    VCVTPD2PS = 880,
    VCVTPD2QQ = 881,
    VCVTPD2UDQ = 882,
    VCVTPD2UQQ = 883,
    VCVTPH2DQ = 884,
    VCVTPH2PD = 885,
    VCVTPH2PS = 886,
    VCVTPH2PSX = 887,
    VCVTPH2QQ = 888,
    VCVTPH2UDQ = 889,
    VCVTPH2UQQ = 890,
    VCVTPH2UW = 891,
    VCVTPH2W = 892,
    VCVTPS2DQ = 893,
    VCVTPS2PD = 894,
    VCVTPS2PH = 895,
    VCVTPS2PHX = 896,
    VCVTPS2QQ = 897,
    VCVTPS2UDQ = 898,
    VCVTPS2UQQ = 899,
    VCVTQQ2PD = 900,
    VCVTQQ2PH = 901,
    VCVTQQ2PS = 902,
    VCVTSD2SH = 903,
    VCVTSD2SI = 904,
    VCVTSD2SS = 905,
    VCVTSD2USI = 906,
    VCVTSH2SD = 907,
    VCVTSH2SI = 908,
    VCVTSH2SS = 909,
    VCVTSH2USI = 910,
    VCVTSI2SD = 911,
    VCVTSI2SH = 912,
    VCVTSI2SS = 913,
    VCVTSS2SD = 914,
    VCVTSS2SH = 915,
    VCVTSS2SI = 916,
    VCVTSS2USI = 917,
    VCVTTPD2DQ = 918,
    VCVTTPD2QQ = 919,
    VCVTTPD2UDQ = 920,
    VCVTTPD2UQQ = 921,
    VCVTTPH2DQ = 922,
    VCVTTPH2QQ = 923,
    VCVTTPH2UDQ = 924,
    VCVTTPH2UQQ = 925,
    VCVTTPH2UW = 926,
    VCVTTPH2W = 927,
    VCVTTPS2DQ = 928,
    VCVTTPS2QQ = 929,
    VCVTTPS2UDQ = 930,
    VCVTTPS2UQQ = 931,
    VCVTTSD2SI = 932,
    VCVTTSD2USI = 933,
    VCVTTSH2SI = 934,
    VCVTTSH2USI = 935,
    VCVTTSS2SI = 936,
    VCVTTSS2USI = 937,
    VCVTUDQ2PD = 938,
    VCVTUDQ2PH = 939,
    VCVTUDQ2PS = 940,
    VCVTUQQ2PD = 941,
    VCVTUQQ2PH = 942,
    VCVTUQQ2PS = 943,
    VCVTUSI2SD = 944,
    VCVTUSI2SH = 945,
    VCVTUSI2SS = 946,
    VCVTUW2PH = 947,
    VCVTW2PH = 948,
    VDBPSADBW = 949,
    VDIVPD = 950,
    VDIVPH = 951,
    VDIVPS = 952,
    VDIVSD = 953,
    VDIVSH = 954,
    VDIVSS = 955,
    VDPBF16PS = 956,
    VDPPD = 957,
    VDPPS = 958,
    VERR = 959,
    VERW = 960,
    VEXP223PS = 961,
    VEXP2PD = 962,
    VEXP2PS = 963,
    VEXPANDPD = 964,
    VEXPANDPS = 965,
    VEXTRACTF128 = 966,
    VEXTRACTF32X4 = 967,
    VEXTRACTF32X8 = 968,
    VEXTRACTF64X2 = 969,
    VEXTRACTF64X4 = 970,
    VEXTRACTI128 = 971,
    VEXTRACTI32X4 = 972,
    VEXTRACTI32X8 = 973,
    VEXTRACTI64X2 = 974,
    VEXTRACTI64X4 = 975,
    VEXTRACTPS = 976,
    VFCMADDCPH = 977,
    VFCMADDCSH = 978,
    VFCMULCPH = 979,
    VFCMULCSH = 980,
    VFIXUPIMMPD = 981,
    VFIXUPIMMPS = 982,
    VFIXUPIMMSD = 983,
    VFIXUPIMMSS = 984,
    VFIXUPNANPD = 985,
    VFIXUPNANPS = 986,
    VFMADD132PD = 987,
    VFMADD132PH = 988,
    VFMADD132PS = 989,
    VFMADD132SD = 990,
    VFMADD132SH = 991,
    VFMADD132SS = 992,
    VFMADD213PD = 993,
    VFMADD213PH = 994,
    VFMADD213PS = 995,
    VFMADD213SD = 996,
    VFMADD213SH = 997,
    VFMADD213SS = 998,
    VFMADD231PD = 999,
    VFMADD231PH = 1000,
    VFMADD231PS = 1001,
    VFMADD231SD = 1002,
    VFMADD231SH = 1003,
    VFMADD231SS = 1004,
    VFMADD233PS = 1005,
    VFMADDCPH = 1006,
    VFMADDCSH = 1007,
    VFMADDPD = 1008,
    VFMADDPS = 1009,
    VFMADDSD = 1010,
    VFMADDSS = 1011,
    VFMADDSUB132PD = 1012,
    VFMADDSUB132PH = 1013,
    VFMADDSUB132PS = 1014,
    VFMADDSUB213PD = 1015,
    VFMADDSUB213PH = 1016,
    VFMADDSUB213PS = 1017,
    VFMADDSUB231PD = 1018,
    VFMADDSUB231PH = 1019,
    VFMADDSUB231PS = 1020,
    VFMADDSUBPD = 1021,
    VFMADDSUBPS = 1022,
    VFMSUB132PD = 1023,
    VFMSUB132PH = 1024,
    VFMSUB132PS = 1025,
    VFMSUB132SD = 1026,
    VFMSUB132SH = 1027,
    VFMSUB132SS = 1028,
    VFMSUB213PD = 1029,
    VFMSUB213PH = 1030,
    VFMSUB213PS = 1031,
    VFMSUB213SD = 1032,
    VFMSUB213SH = 1033,
    VFMSUB213SS = 1034,
    VFMSUB231PD = 1035,
    VFMSUB231PH = 1036,
    VFMSUB231PS = 1037,
    VFMSUB231SD = 1038,
    VFMSUB231SH = 1039,
    VFMSUB231SS = 1040,
    VFMSUBADD132PD = 1041,
    VFMSUBADD132PH = 1042,
    VFMSUBADD132PS = 1043,
    VFMSUBADD213PD = 1044,
    VFMSUBADD213PH = 1045,
    VFMSUBADD213PS = 1046,
    VFMSUBADD231PD = 1047,
    VFMSUBADD231PH = 1048,
    VFMSUBADD231PS = 1049,
    VFMSUBADDPD = 1050,
    VFMSUBADDPS = 1051,
    VFMSUBPD = 1052,
    VFMSUBPS = 1053,
    VFMSUBSD = 1054,
    VFMSUBSS = 1055,
    VFMULCPH = 1056,
    VFMULCSH = 1057,
    VFNMADD132PD = 1058,
    VFNMADD132PH = 1059,
    VFNMADD132PS = 1060,
    VFNMADD132SD = 1061,
    VFNMADD132SH = 1062,
    VFNMADD132SS = 1063,
    VFNMADD213PD = 1064,
    VFNMADD213PH = 1065,
    VFNMADD213PS = 1066,
    VFNMADD213SD = 1067,
    VFNMADD213SH = 1068,
    VFNMADD213SS = 1069,
    VFNMADD231PD = 1070,
    VFNMADD231PH = 1071,
    VFNMADD231PS = 1072,
    VFNMADD231SD = 1073,
    VFNMADD231SH = 1074,
    VFNMADD231SS = 1075,
    VFNMADDPD = 1076,
    VFNMADDPS = 1077,
    VFNMADDSD = 1078,
    VFNMADDSS = 1079,
    VFNMSUB132PD = 1080,
    VFNMSUB132PH = 1081,
    VFNMSUB132PS = 1082,
    VFNMSUB132SD = 1083,
    VFNMSUB132SH = 1084,
    VFNMSUB132SS = 1085,
    VFNMSUB213PD = 1086,
    VFNMSUB213PH = 1087,
    VFNMSUB213PS = 1088,
    VFNMSUB213SD = 1089,
    VFNMSUB213SH = 1090,
    VFNMSUB213SS = 1091,
    VFNMSUB231PD = 1092,
    VFNMSUB231PH = 1093,
    VFNMSUB231PS = 1094,
    VFNMSUB231SD = 1095,
    VFNMSUB231SH = 1096,
    VFNMSUB231SS = 1097,
    VFNMSUBPD = 1098,
    VFNMSUBPS = 1099,
    VFNMSUBSD = 1100,
    VFNMSUBSS = 1101,
    VFPCLASSPD = 1102,
    VFPCLASSPH = 1103,
    VFPCLASSPS = 1104,
    VFPCLASSSD = 1105,
    VFPCLASSSH = 1106,
    VFPCLASSSS = 1107,
    VFRCZPD = 1108,
    VFRCZPS = 1109,
    VFRCZSD = 1110,
    VFRCZSS = 1111,
    VGATHERDPD = 1112,
    VGATHERDPS = 1113,
    VGATHERPF0DPD = 1114,
    VGATHERPF0DPS = 1115,
    VGATHERPF0HINTDPD = 1116,
    VGATHERPF0HINTDPS = 1117,
    VGATHERPF0QPD = 1118,
    VGATHERPF0QPS = 1119,
    VGATHERPF1DPD = 1120,
    VGATHERPF1DPS = 1121,
    VGATHERPF1QPD = 1122,
    VGATHERPF1QPS = 1123,
    VGATHERQPD = 1124,
    VGATHERQPS = 1125,
    VGETEXPPD = 1126,
    VGETEXPPH = 1127,
    VGETEXPPS = 1128,
    VGETEXPSD = 1129,
    VGETEXPSH = 1130,
    VGETEXPSS = 1131,
    VGETMANTPD = 1132,
    VGETMANTPH = 1133,
    VGETMANTPS = 1134,
    VGETMANTSD = 1135,
    VGETMANTSH = 1136,
    VGETMANTSS = 1137,
    VGF2P8AFFINEINVQB = 1138,
    VGF2P8AFFINEQB = 1139,
    VGF2P8MULB = 1140,
    VGMAXABSPS = 1141,
    VGMAXPD = 1142,
    VGMAXPS = 1143,
    VGMINPD = 1144,
    VGMINPS = 1145,
    VHADDPD = 1146,
    VHADDPS = 1147,
    VHSUBPD = 1148,
    VHSUBPS = 1149,
    VINSERTF128 = 1150,
    VINSERTF32X4 = 1151,
    VINSERTF32X8 = 1152,
    VINSERTF64X2 = 1153,
    VINSERTF64X4 = 1154,
    VINSERTI128 = 1155,
    VINSERTI32X4 = 1156,
    VINSERTI32X8 = 1157,
    VINSERTI64X2 = 1158,
    VINSERTI64X4 = 1159,
    VINSERTPS = 1160,
    VLDDQU = 1161,
    VLDMXCSR = 1162,
    VLOADUNPACKHD = 1163,
    VLOADUNPACKHPD = 1164,
    VLOADUNPACKHPS = 1165,
    VLOADUNPACKHQ = 1166,
    VLOADUNPACKLD = 1167,
    VLOADUNPACKLPD = 1168,
    VLOADUNPACKLPS = 1169,
    VLOADUNPACKLQ = 1170,
    VLOG2PS = 1171,
    VMASKMOVDQU = 1172,
    VMASKMOVPD = 1173,
    VMASKMOVPS = 1174,
    VMAXPD = 1175,
    VMAXPH = 1176,
    VMAXPS = 1177,
    VMAXSD = 1178,
    VMAXSH = 1179,
    VMAXSS = 1180,
    VMCALL = 1181,
    VMCLEAR = 1182,
    VMFUNC = 1183,
    VMINPD = 1184,
    VMINPH = 1185,
    VMINPS = 1186,
    VMINSD = 1187,
    VMINSH = 1188,
    VMINSS = 1189,
    VMLAUNCH = 1190,
    VMLOAD = 1191,
    VMMCALL = 1192,
    VMOVAPD = 1193,
    VMOVAPS = 1194,
    VMOVD = 1195,
    VMOVDDUP = 1196,
    VMOVDQA = 1197,
    VMOVDQA32 = 1198,
    VMOVDQA64 = 1199,
    VMOVDQU = 1200,
    VMOVDQU16 = 1201,
    VMOVDQU32 = 1202,
    VMOVDQU64 = 1203,
    VMOVDQU8 = 1204,
    VMOVHLPS = 1205,
    VMOVHPD = 1206,
    VMOVHPS = 1207,
    VMOVLHPS = 1208,
    VMOVLPD = 1209,
    VMOVLPS = 1210,
    VMOVMSKPD = 1211,
    VMOVMSKPS = 1212,
    VMOVNRAPD = 1213,
    VMOVNRAPS = 1214,
    VMOVNRNGOAPD = 1215,
    VMOVNRNGOAPS = 1216,
    VMOVNTDQ = 1217,
    VMOVNTDQA = 1218,
    VMOVNTPD = 1219,
    VMOVNTPS = 1220,
    VMOVQ = 1221,
    VMOVSD = 1222,
    VMOVSH = 1223,
    VMOVSHDUP = 1224,
    VMOVSLDUP = 1225,
    VMOVSS = 1226,
    VMOVUPD = 1227,
    VMOVUPS = 1228,
    VMOVW = 1229,
    VMPSADBW = 1230,
    VMPTRLD = 1231,
    VMPTRST = 1232,
    VMREAD = 1233,
    VMRESUME = 1234,
    VMRUN = 1235,
    VMSAVE = 1236,
    VMULPD = 1237,
    VMULPH = 1238,
    VMULPS = 1239,
    VMULSD = 1240,
    VMULSH = 1241,
    VMULSS = 1242,
    VMWRITE = 1243,
    VMXOFF = 1244,
    VMXON = 1245,
    VORPD = 1246,
    VORPS = 1247,
    VP2INTERSECTD = 1248,
    VP2INTERSECTQ = 1249,
    VP4DPWSSD = 1250,
    VP4DPWSSDS = 1251,
    VPABSB = 1252,
    VPABSD = 1253,
    VPABSQ = 1254,
    VPABSW = 1255,
    VPACKSSDW = 1256,
    VPACKSSWB = 1257,
    VPACKSTOREHD = 1258,
    VPACKSTOREHPD = 1259,
    VPACKSTOREHPS = 1260,
    VPACKSTOREHQ = 1261,
    VPACKSTORELD = 1262,
    VPACKSTORELPD = 1263,
    VPACKSTORELPS = 1264,
    VPACKSTORELQ = 1265,
    VPACKUSDW = 1266,
    VPACKUSWB = 1267,
    VPADCD = 1268,
    VPADDB = 1269,
    VPADDD = 1270,
    VPADDQ = 1271,
    VPADDSB = 1272,
    VPADDSETCD = 1273,
    VPADDSETSD = 1274,
    VPADDSW = 1275,
    VPADDUSB = 1276,
    VPADDUSW = 1277,
    VPADDW = 1278,
    VPALIGNR = 1279,
    VPAND = 1280,
    VPANDD = 1281,
    VPANDN = 1282,
    VPANDND = 1283,
    VPANDNQ = 1284,
    VPANDQ = 1285,
    VPAVGB = 1286,
    VPAVGW = 1287,
    VPBLENDD = 1288,
    VPBLENDMB = 1289,
    VPBLENDMD = 1290,
    VPBLENDMQ = 1291,
    VPBLENDMW = 1292,
    VPBLENDVB = 1293,
    VPBLENDW = 1294,
    VPBROADCASTB = 1295,
    VPBROADCASTD = 1296,
    VPBROADCASTMB2Q = 1297,
    VPBROADCASTMW2D = 1298,
    VPBROADCASTQ = 1299,
    VPBROADCASTW = 1300,
    VPCLMULQDQ = 1301,
    VPCMOV = 1302,
    VPCMPB = 1303,
    VPCMPD = 1304,
    VPCMPEQB = 1305,
    VPCMPEQD = 1306,
    VPCMPEQQ = 1307,
    VPCMPEQW = 1308,
    VPCMPESTRI = 1309,
    VPCMPESTRM = 1310,
    VPCMPGTB = 1311,
    VPCMPGTD = 1312,
    VPCMPGTQ = 1313,
    VPCMPGTW = 1314,
    VPCMPISTRI = 1315,
    VPCMPISTRM = 1316,
    VPCMPLTD = 1317,
    VPCMPQ = 1318,
    VPCMPUB = 1319,
    VPCMPUD = 1320,
    VPCMPUQ = 1321,
    VPCMPUW = 1322,
    VPCMPW = 1323,
    VPCOMB = 1324,
    VPCOMD = 1325,
    VPCOMPRESSB = 1326,
    VPCOMPRESSD = 1327,
    VPCOMPRESSQ = 1328,
    VPCOMPRESSW = 1329,
    VPCOMQ = 1330,
    VPCOMUB = 1331,
    VPCOMUD = 1332,
    VPCOMUQ = 1333,
    VPCOMUW = 1334,
    VPCOMW = 1335,
    VPCONFLICTD = 1336,
    VPCONFLICTQ = 1337,
    VPDPBUSD = 1338,
    VPDPBUSDS = 1339,
    VPDPWSSD = 1340,
    VPDPWSSDS = 1341,
    VPERM2F128 = 1342,
    VPERM2I128 = 1343,
    VPERMB = 1344,
    VPERMD = 1345,
    VPERMF32X4 = 1346,
    VPERMI2B = 1347,
    VPERMI2D = 1348,
    VPERMI2PD = 1349,
    VPERMI2PS = 1350,
    VPERMI2Q = 1351,
    VPERMI2W = 1352,
    VPERMIL2PD = 1353,
    VPERMIL2PS = 1354,
    VPERMILPD = 1355,
    VPERMILPS = 1356,
    VPERMPD = 1357,
    VPERMPS = 1358,
    VPERMQ = 1359,
    VPERMT2B = 1360,
    VPERMT2D = 1361,
    VPERMT2PD = 1362,
    VPERMT2PS = 1363,
    VPERMT2Q = 1364,
    VPERMT2W = 1365,
    VPERMW = 1366,
    VPEXPANDB = 1367,
    VPEXPANDD = 1368,
    VPEXPANDQ = 1369,
    VPEXPANDW = 1370,
    VPEXTRB = 1371,
    VPEXTRD = 1372,
    VPEXTRQ = 1373,
    VPEXTRW = 1374,
    VPGATHERDD = 1375,
    VPGATHERDQ = 1376,
    VPGATHERQD = 1377,
    VPGATHERQQ = 1378,
    VPHADDBD = 1379,
    VPHADDBQ = 1380,
    VPHADDBW = 1381,
    VPHADDD = 1382,
    VPHADDDQ = 1383,
    VPHADDSW = 1384,
    VPHADDUBD = 1385,
    VPHADDUBQ = 1386,
    VPHADDUBW = 1387,
    VPHADDUDQ = 1388,
    VPHADDUWD = 1389,
    VPHADDUWQ = 1390,
    VPHADDW = 1391,
    VPHADDWD = 1392,
    VPHADDWQ = 1393,
    VPHMINPOSUW = 1394,
    VPHSUBBW = 1395,
    VPHSUBD = 1396,
    VPHSUBDQ = 1397,
    VPHSUBSW = 1398,
    VPHSUBW = 1399,
    VPHSUBWD = 1400,
    VPINSRB = 1401,
    VPINSRD = 1402,
    VPINSRQ = 1403,
    VPINSRW = 1404,
    VPLZCNTD = 1405,
    VPLZCNTQ = 1406,
    VPMACSDD = 1407,
    VPMACSDQH = 1408,
    VPMACSDQL = 1409,
    VPMACSSDD = 1410,
    VPMACSSDQH = 1411,
    VPMACSSDQL = 1412,
    VPMACSSWD = 1413,
    VPMACSSWW = 1414,
    VPMACSWD = 1415,
    VPMACSWW = 1416,
    VPMADCSSWD = 1417,
    VPMADCSWD = 1418,
    VPMADD231D = 1419,
    VPMADD233D = 1420,
    VPMADD52HUQ = 1421,
    VPMADD52LUQ = 1422,
    VPMADDUBSW = 1423,
    VPMADDWD = 1424,
    VPMASKMOVD = 1425,
    VPMASKMOVQ = 1426,
    VPMAXSB = 1427,
    VPMAXSD = 1428,
    VPMAXSQ = 1429,
    VPMAXSW = 1430,
    VPMAXUB = 1431,
    VPMAXUD = 1432,
    VPMAXUQ = 1433,
    VPMAXUW = 1434,
    VPMINSB = 1435,
    VPMINSD = 1436,
    VPMINSQ = 1437,
    VPMINSW = 1438,
    VPMINUB = 1439,
    VPMINUD = 1440,
    VPMINUQ = 1441,
    VPMINUW = 1442,
    VPMOVB2M = 1443,
    VPMOVD2M = 1444,
    VPMOVDB = 1445,
    VPMOVDW = 1446,
    VPMOVM2B = 1447,
    VPMOVM2D = 1448,
    VPMOVM2Q = 1449,
    VPMOVM2W = 1450,
    VPMOVMSKB = 1451,
    VPMOVQ2M = 1452,
    VPMOVQB = 1453,
    VPMOVQD = 1454,
    VPMOVQW = 1455,
    VPMOVSDB = 1456,
    VPMOVSDW = 1457,
    VPMOVSQB = 1458,
    VPMOVSQD = 1459,
    VPMOVSQW = 1460,
    VPMOVSWB = 1461,
    VPMOVSXBD = 1462,
    VPMOVSXBQ = 1463,
    VPMOVSXBW = 1464,
    VPMOVSXDQ = 1465,
    VPMOVSXWD = 1466,
    VPMOVSXWQ = 1467,
    VPMOVUSDB = 1468,
    VPMOVUSDW = 1469,
    VPMOVUSQB = 1470,
    VPMOVUSQD = 1471,
    VPMOVUSQW = 1472,
    VPMOVUSWB = 1473,
    VPMOVW2M = 1474,
    VPMOVWB = 1475,
    VPMOVZXBD = 1476,
    VPMOVZXBQ = 1477,
    VPMOVZXBW = 1478,
    VPMOVZXDQ = 1479,
    VPMOVZXWD = 1480,
    VPMOVZXWQ = 1481,
    VPMULDQ = 1482,
    VPMULHD = 1483,
    VPMULHRSW = 1484,
    VPMULHUD = 1485,
    VPMULHUW = 1486,
    VPMULHW = 1487,
    VPMULLD = 1488,
    VPMULLQ = 1489,
    VPMULLW = 1490,
    VPMULTISHIFTQB = 1491,
    VPMULUDQ = 1492,
    VPOPCNTB = 1493,
    VPOPCNTD = 1494,
    VPOPCNTQ = 1495,
    VPOPCNTW = 1496,
    VPOR = 1497,
    VPORD = 1498,
    VPORQ = 1499,
    VPPERM = 1500,
    VPREFETCH0 = 1501,
    VPREFETCH1 = 1502,
    VPREFETCH2 = 1503,
    VPREFETCHE0 = 1504,
    VPREFETCHE1 = 1505,
    VPREFETCHE2 = 1506,
    VPREFETCHENTA = 1507,
    VPREFETCHNTA = 1508,
    VPROLD = 1509,
    VPROLQ = 1510,
    VPROLVD = 1511,
    VPROLVQ = 1512,
    VPRORD = 1513,
    VPRORQ = 1514,
    VPRORVD = 1515,
    VPRORVQ = 1516,
    VPROTB = 1517,
    VPROTD = 1518,
    VPROTQ = 1519,
    VPROTW = 1520,
    VPSADBW = 1521,
    VPSBBD = 1522,
    VPSBBRD = 1523,
    VPSCATTERDD = 1524,
    VPSCATTERDQ = 1525,
    VPSCATTERQD = 1526,
    VPSCATTERQQ = 1527,
    VPSHAB = 1528,
    VPSHAD = 1529,
    VPSHAQ = 1530,
    VPSHAW = 1531,
    VPSHLB = 1532,
    VPSHLD = 1533,
    VPSHLDD = 1534,
    VPSHLDQ = 1535,
    VPSHLDVD = 1536,
    VPSHLDVQ = 1537,
    VPSHLDVW = 1538,
    VPSHLDW = 1539,
    VPSHLQ = 1540,
    VPSHLW = 1541,
    VPSHRDD = 1542,
    VPSHRDQ = 1543,
    VPSHRDVD = 1544,
    VPSHRDVQ = 1545,
    VPSHRDVW = 1546,
    VPSHRDW = 1547,
    VPSHUFB = 1548,
    VPSHUFBITQMB = 1549,
    VPSHUFD = 1550,
    VPSHUFHW = 1551,
    VPSHUFLW = 1552,
    VPSIGNB = 1553,
    VPSIGND = 1554,
    VPSIGNW = 1555,
    VPSLLD = 1556,
    VPSLLDQ = 1557,
    VPSLLQ = 1558,
    VPSLLVD = 1559,
    VPSLLVQ = 1560,
    VPSLLVW = 1561,
    VPSLLW = 1562,
    VPSRAD = 1563,
    VPSRAQ = 1564,
    VPSRAVD = 1565,
    VPSRAVQ = 1566,
    VPSRAVW = 1567,
    VPSRAW = 1568,
    VPSRLD = 1569,
    VPSRLDQ = 1570,
    VPSRLQ = 1571,
    VPSRLVD = 1572,
    VPSRLVQ = 1573,
    VPSRLVW = 1574,
    VPSRLW = 1575,
    VPSUBB = 1576,
    VPSUBD = 1577,
    VPSUBQ = 1578,
    VPSUBRD = 1579,
    VPSUBRSETBD = 1580,
    VPSUBSB = 1581,
    VPSUBSETBD = 1582,
    VPSUBSW = 1583,
    VPSUBUSB = 1584,
    VPSUBUSW = 1585,
    VPSUBW = 1586,
    VPTERNLOGD = 1587,
    VPTERNLOGQ = 1588,
    VPTEST = 1589,
    VPTESTMB = 1590,
    VPTESTMD = 1591,
    VPTESTMQ = 1592,
    VPTESTMW = 1593,
    VPTESTNMB = 1594,
    VPTESTNMD = 1595,
    VPTESTNMQ = 1596,
    VPTESTNMW = 1597,
    VPUNPCKHBW = 1598,
    VPUNPCKHDQ = 1599,
    VPUNPCKHQDQ = 1600,
    VPUNPCKHWD = 1601,
    VPUNPCKLBW = 1602,
    VPUNPCKLDQ = 1603,
    VPUNPCKLQDQ = 1604,
    VPUNPCKLWD = 1605,
    VPXOR = 1606,
    VPXORD = 1607,
    VPXORQ = 1608,
    VRANGEPD = 1609,
    VRANGEPS = 1610,
    VRANGESD = 1611,
    VRANGESS = 1612,
    VRCP14PD = 1613,
    VRCP14PS = 1614,
    VRCP14SD = 1615,
    VRCP14SS = 1616,
    VRCP23PS = 1617,
    VRCP28PD = 1618,
    VRCP28PS = 1619,
    VRCP28SD = 1620,
    VRCP28SS = 1621,
    VRCPPH = 1622,
    VRCPPS = 1623,
    VRCPSH = 1624,
    VRCPSS = 1625,
    VREDUCEPD = 1626,
    VREDUCEPH = 1627,
    VREDUCEPS = 1628,
    VREDUCESD = 1629,
    VREDUCESH = 1630,
    VREDUCESS = 1631,
    VRNDFXPNTPD = 1632,
    VRNDFXPNTPS = 1633,
    VRNDSCALEPD = 1634,
    VRNDSCALEPH = 1635,
    VRNDSCALEPS = 1636,
    VRNDSCALESD = 1637,
    VRNDSCALESH = 1638,
    VRNDSCALESS = 1639,
    VROUNDPD = 1640,
    VROUNDPS = 1641,
    VROUNDSD = 1642,
    VROUNDSS = 1643,
    VRSQRT14PD = 1644,
    VRSQRT14PS = 1645,
    VRSQRT14SD = 1646,
    VRSQRT14SS = 1647,
    VRSQRT23PS = 1648,
    VRSQRT28PD = 1649,
    VRSQRT28PS = 1650,
    VRSQRT28SD = 1651,
    VRSQRT28SS = 1652,
    VRSQRTPH = 1653,
    VRSQRTPS = 1654,
    VRSQRTSH = 1655,
    VRSQRTSS = 1656,
    VSCALEFPD = 1657,
    VSCALEFPH = 1658,
    VSCALEFPS = 1659,
    VSCALEFSD = 1660,
    VSCALEFSH = 1661,
    VSCALEFSS = 1662,
    VSCALEPS = 1663,
    VSCATTERDPD = 1664,
    VSCATTERDPS = 1665,
    VSCATTERPF0DPD = 1666,
    VSCATTERPF0DPS = 1667,
    VSCATTERPF0HINTDPD = 1668,
    VSCATTERPF0HINTDPS = 1669,
    VSCATTERPF0QPD = 1670,
    VSCATTERPF0QPS = 1671,
    VSCATTERPF1DPD = 1672,
    VSCATTERPF1DPS = 1673,
    VSCATTERPF1QPD = 1674,
    VSCATTERPF1QPS = 1675,
    VSCATTERQPD = 1676,
    VSCATTERQPS = 1677,
    VSHUFF32X4 = 1678,
    VSHUFF64X2 = 1679,
    VSHUFI32X4 = 1680,
    VSHUFI64X2 = 1681,
    VSHUFPD = 1682,
    VSHUFPS = 1683,
    VSQRTPD = 1684,
    VSQRTPH = 1685,
    VSQRTPS = 1686,
    VSQRTSD = 1687,
    VSQRTSH = 1688,
    VSQRTSS = 1689,
    VSTMXCSR = 1690,
    VSUBPD = 1691,
    VSUBPH = 1692,
    VSUBPS = 1693,
    VSUBRPD = 1694,
    VSUBRPS = 1695,
    VSUBSD = 1696,
    VSUBSH = 1697,
    VSUBSS = 1698,
    VTESTPD = 1699,
    VTESTPS = 1700,
    VUCOMISD = 1701,
    VUCOMISH = 1702,
    VUCOMISS = 1703,
    VUNPCKHPD = 1704,
    VUNPCKHPS = 1705,
    VUNPCKLPD = 1706,
    VUNPCKLPS = 1707,
    VXORPD = 1708,
    VXORPS = 1709,
    VZEROALL = 1710,
    VZEROUPPER = 1711,
    WBINVD = 1712,
    WRFSBASE = 1713,
    WRGSBASE = 1714,
    WRMSR = 1715,
    WRPKRU = 1716,
    WRSSD = 1717,
    WRSSQ = 1718,
    WRUSSD = 1719,
    WRUSSQ = 1720,
    XABORT = 1721,
    XADD = 1722,
    XBEGIN = 1723,
    XCHG = 1724,
    XCRYPT_CBC = 1725,
    XCRYPT_CFB = 1726,
    XCRYPT_CTR = 1727,
    XCRYPT_ECB = 1728,
    XCRYPT_OFB = 1729,
    XEND = 1730,
    XGETBV = 1731,
    XLAT = 1732,
    XOR = 1733,
    XORPD = 1734,
    XORPS = 1735,
    XRESLDTRK = 1736,
    XRSTOR = 1737,
    XRSTOR64 = 1738,
    XRSTORS = 1739,
    XRSTORS64 = 1740,
    XSAVE = 1741,
    XSAVE64 = 1742,
    XSAVEC = 1743,
    XSAVEC64 = 1744,
    XSAVEOPT = 1745,
    XSAVEOPT64 = 1746,
    XSAVES = 1747,
    XSAVES64 = 1748,
    XSETBV = 1749,
    XSHA1 = 1750,
    XSHA256 = 1751,
    XSTORE = 1752,
    XSUSLDTRK = 1753,
    XTEST = 1754,
}

pub const MNEMONIC_MAX_VALUE: usize = 1754;

/// Defines the `ZydisMachineMode` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum MachineMode {
    /// 64 bit mode.
    LONG_64 = 0,
    /// 32 bit protected mode.
    LONG_COMPAT_32 = 1,
    /// 16 bit protected mode.
    LONG_COMPAT_16 = 2,
    /// 32 bit protected mode.
    LEGACY_32 = 3,
    /// 16 bit protected mode.
    LEGACY_16 = 4,
    /// 16 bit real mode.
    REAL_16 = 5,
}

pub const MACHINE_MODE_MAX_VALUE: usize = 5;

/// Defines the `ZydisStackWidth` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum StackWidth {
    _16 = 0,
    _32 = 1,
    _64 = 2,
}

pub const STACK_WIDTH_MAX_VALUE: usize = 2;

/// Defines the `ZydisElementType` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum ElementType {
    INVALID = 0,
    /// A struct type.
    STRUCT = 1,
    /// Unsigned integer value.
    UINT = 2,
    /// Signed integer value.
    INT = 3,
    /// 16-bit floating point value (`half`).
    FLOAT16 = 4,
    /// 32-bit floating point value (`single`).
    FLOAT32 = 5,
    /// 64-bit floating point value (`double`).
    FLOAT64 = 6,
    /// 80-bit floating point value (`extended`).
    FLOAT80 = 7,
    /// Binary coded decimal value.
    LONGBCD = 8,
    /// A condition code (e.g. used by `CMPPD`, `VCMPPD`, ...).
    CC = 9,
}

pub const ELEMENT_TYPE_MAX_VALUE: usize = 9;

/// Defines the `ZydisOperandType` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum OperandType {
    /// The operand is not used.
    UNUSED = 0,
    /// The operand is a register operand.
    REGISTER = 1,
    /// The operand is a memory operand.
    MEMORY = 2,
    /// The operand is a pointer operand with a segment:offset lvalue.
    POINTER = 3,
    /// The operand is an immediate operand.
    IMMEDIATE = 4,
}

pub const OPERAND_TYPE_MAX_VALUE: usize = 4;

/// Defines the `ZydisOperandEncoding` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum OperandEncoding {
    NONE = 0,
    MODRM_REG = 1,
    MODRM_RM = 2,
    OPCODE = 3,
    NDSNDD = 4,
    IS4 = 5,
    MASK = 6,
    DISP8 = 7,
    DISP16 = 8,
    DISP32 = 9,
    DISP64 = 10,
    DISP16_32_64 = 11,
    DISP32_32_64 = 12,
    DISP16_32_32 = 13,
    UIMM8 = 14,
    UIMM16 = 15,
    UIMM32 = 16,
    UIMM64 = 17,
    UIMM16_32_64 = 18,
    UIMM32_32_64 = 19,
    UIMM16_32_32 = 20,
    SIMM8 = 21,
    SIMM16 = 22,
    SIMM32 = 23,
    SIMM64 = 24,
    SIMM16_32_64 = 25,
    SIMM32_32_64 = 26,
    SIMM16_32_32 = 27,
    JIMM8 = 28,
    JIMM16 = 29,
    JIMM32 = 30,
    JIMM64 = 31,
    JIMM16_32_64 = 32,
    JIMM32_32_64 = 33,
    JIMM16_32_32 = 34,
}

pub const OPERAND_ENCODING_MAX_VALUE: usize = 34;

/// Defines the `ZydisOperandVisibility` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum OperandVisibility {
    INVALID = 0,
    /// The operand is explicitly encoded in the instruction.
    EXPLICIT = 1,
    /// The operand is part of the opcode, but listed as an operand.
    IMPLICIT = 2,
    /// The operand is part of the opcode, and not typically listed as an
    /// operand.
    HIDDEN = 3,
}

pub const OPERAND_VISIBILITY_MAX_VALUE: usize = 3;

/// Defines the `ZydisInstructionEncoding` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum InstructionEncoding {
    /// The instruction uses the legacy encoding.
    LEGACY = 0,
    /// The instruction uses the AMD 3DNow-encoding.
    _3DNOW = 1,
    /// The instruction uses the AMD XOP-encoding.
    XOP = 2,
    /// The instruction uses the VEX-encoding.
    VEX = 3,
    /// The instruction uses the EVEX-encoding.
    EVEX = 4,
    /// The instruction uses the MVEX-encoding.
    MVEX = 5,
}

pub const INSTRUCTION_ENCODING_MAX_VALUE: usize = 5;

/// Defines the `ZydisOpcodeMap` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum OpcodeMap {
    DEFAULT = 0,
    _0F = 1,
    _0F38 = 2,
    _0F3A = 3,
    MAP4 = 4,
    MAP5 = 5,
    MAP6 = 6,
    MAP7 = 7,
    _0F0F = 8,
    XOP8 = 9,
    XOP9 = 10,
    XOPA = 11,
}

pub const OPCODE_MAP_MAX_VALUE: usize = 11;

/// Defines the `ZydisRegister` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum Register {
    NONE = 0,
    AL = 1,
    CL = 2,
    DL = 3,
    BL = 4,
    AH = 5,
    CH = 6,
    DH = 7,
    BH = 8,
    SPL = 9,
    BPL = 10,
    SIL = 11,
    DIL = 12,
    R8B = 13,
    R9B = 14,
    R10B = 15,
    R11B = 16,
    R12B = 17,
    R13B = 18,
    R14B = 19,
    R15B = 20,
    AX = 21,
    CX = 22,
    DX = 23,
    BX = 24,
    SP = 25,
    BP = 26,
    SI = 27,
    DI = 28,
    R8W = 29,
    R9W = 30,
    R10W = 31,
    R11W = 32,
    R12W = 33,
    R13W = 34,
    R14W = 35,
    R15W = 36,
    EAX = 37,
    ECX = 38,
    EDX = 39,
    EBX = 40,
    ESP = 41,
    EBP = 42,
    ESI = 43,
    EDI = 44,
    R8D = 45,
    R9D = 46,
    R10D = 47,
    R11D = 48,
    R12D = 49,
    R13D = 50,
    R14D = 51,
    R15D = 52,
    RAX = 53,
    RCX = 54,
    RDX = 55,
    RBX = 56,
    RSP = 57,
    RBP = 58,
    RSI = 59,
    RDI = 60,
    R8 = 61,
    R9 = 62,
    R10 = 63,
    R11 = 64,
    R12 = 65,
    R13 = 66,
    R14 = 67,
    R15 = 68,
    ST0 = 69,
    ST1 = 70,
    ST2 = 71,
    ST3 = 72,
    ST4 = 73,
    ST5 = 74,
    ST6 = 75,
    ST7 = 76,
    X87CONTROL = 77,
    X87STATUS = 78,
    X87TAG = 79,
    MM0 = 80,
    MM1 = 81,
    MM2 = 82,
    MM3 = 83,
    MM4 = 84,
    MM5 = 85,
    MM6 = 86,
    MM7 = 87,
    XMM0 = 88,
    XMM1 = 89,
    XMM2 = 90,
    XMM3 = 91,
    XMM4 = 92,
    XMM5 = 93,
    XMM6 = 94,
    XMM7 = 95,
    XMM8 = 96,
    XMM9 = 97,
    XMM10 = 98,
    XMM11 = 99,
    XMM12 = 100,
    XMM13 = 101,
    XMM14 = 102,
    XMM15 = 103,
    XMM16 = 104,
    XMM17 = 105,
    XMM18 = 106,
    XMM19 = 107,
    XMM20 = 108,
    XMM21 = 109,
    XMM22 = 110,
    XMM23 = 111,
    XMM24 = 112,
    XMM25 = 113,
    XMM26 = 114,
    XMM27 = 115,
    XMM28 = 116,
    XMM29 = 117,
    XMM30 = 118,
    XMM31 = 119,
    YMM0 = 120,
    YMM1 = 121,
    YMM2 = 122,
    YMM3 = 123,
    YMM4 = 124,
    YMM5 = 125,
    YMM6 = 126,
    YMM7 = 127,
    YMM8 = 128,
    YMM9 = 129,
    YMM10 = 130,
    YMM11 = 131,
    YMM12 = 132,
    YMM13 = 133,
    YMM14 = 134,
    YMM15 = 135,
    YMM16 = 136,
    YMM17 = 137,
    YMM18 = 138,
    YMM19 = 139,
    YMM20 = 140,
    YMM21 = 141,
    YMM22 = 142,
    YMM23 = 143,
    YMM24 = 144,
    YMM25 = 145,
    YMM26 = 146,
    YMM27 = 147,
    YMM28 = 148,
    YMM29 = 149,
    YMM30 = 150,
    YMM31 = 151,
    ZMM0 = 152,
    ZMM1 = 153,
    ZMM2 = 154,
    ZMM3 = 155,
    ZMM4 = 156,
    ZMM5 = 157,
    ZMM6 = 158,
    ZMM7 = 159,
    ZMM8 = 160,
    ZMM9 = 161,
    ZMM10 = 162,
    ZMM11 = 163,
    ZMM12 = 164,
    ZMM13 = 165,
    ZMM14 = 166,
    ZMM15 = 167,
    ZMM16 = 168,
    ZMM17 = 169,
    ZMM18 = 170,
    ZMM19 = 171,
    ZMM20 = 172,
    ZMM21 = 173,
    ZMM22 = 174,
    ZMM23 = 175,
    ZMM24 = 176,
    ZMM25 = 177,
    ZMM26 = 178,
    ZMM27 = 179,
    ZMM28 = 180,
    ZMM29 = 181,
    ZMM30 = 182,
    ZMM31 = 183,
    TMM0 = 184,
    TMM1 = 185,
    TMM2 = 186,
    TMM3 = 187,
    TMM4 = 188,
    TMM5 = 189,
    TMM6 = 190,
    TMM7 = 191,
    FLAGS = 192,
    EFLAGS = 193,
    RFLAGS = 194,
    IP = 195,
    EIP = 196,
    RIP = 197,
    ES = 198,
    CS = 199,
    SS = 200,
    DS = 201,
    FS = 202,
    GS = 203,
    GDTR = 204,
    LDTR = 205,
    IDTR = 206,
    TR = 207,
    TR0 = 208,
    TR1 = 209,
    TR2 = 210,
    TR3 = 211,
    TR4 = 212,
    TR5 = 213,
    TR6 = 214,
    TR7 = 215,
    CR0 = 216,
    CR1 = 217,
    CR2 = 218,
    CR3 = 219,
    CR4 = 220,
    CR5 = 221,
    CR6 = 222,
    CR7 = 223,
    CR8 = 224,
    CR9 = 225,
    CR10 = 226,
    CR11 = 227,
    CR12 = 228,
    CR13 = 229,
    CR14 = 230,
    CR15 = 231,
    DR0 = 232,
    DR1 = 233,
    DR2 = 234,
    DR3 = 235,
    DR4 = 236,
    DR5 = 237,
    DR6 = 238,
    DR7 = 239,
    DR8 = 240,
    DR9 = 241,
    DR10 = 242,
    DR11 = 243,
    DR12 = 244,
    DR13 = 245,
    DR14 = 246,
    DR15 = 247,
    K0 = 248,
    K1 = 249,
    K2 = 250,
    K3 = 251,
    K4 = 252,
    K5 = 253,
    K6 = 254,
    K7 = 255,
    BND0 = 256,
    BND1 = 257,
    BND2 = 258,
    BND3 = 259,
    BNDCFG = 260,
    BNDSTATUS = 261,
    MXCSR = 262,
    PKRU = 263,
    XCR0 = 264,
    UIF = 265,
}

pub const REGISTER_MAX_VALUE: usize = 265;

/// Defines the `ZydisRegisterKind` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum RegisterKind {
    INVALID = 0,
    GPR = 1,
    X87 = 2,
    MMX = 3,
    VR = 4,
    TMM = 5,
    SEGMENT = 6,
    TEST = 7,
    CONTROL = 8,
    DEBUG = 9,
    MASK = 10,
    BOUND = 11,
}

pub const REGKIND_MAX_VALUE: usize = 11;

/// Defines the `ZydisRegisterClass` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum RegisterClass {
    INVALID = 0,
    /// 8-bit general-purpose registers.
    GPR8 = 1,
    /// 16-bit general-purpose registers.
    GPR16 = 2,
    /// 32-bit general-purpose registers.
    GPR32 = 3,
    /// 64-bit general-purpose registers.
    GPR64 = 4,
    /// Floating point legacy registers.
    X87 = 5,
    /// Floating point multimedia registers.
    MMX = 6,
    /// 128-bit vector registers.
    XMM = 7,
    /// 256-bit vector registers.
    YMM = 8,
    /// 512-bit vector registers.
    ZMM = 9,
    /// Matrix registers.
    TMM = 10,
    /// Matrix registers.
    FLAGS = 11,
    /// Instruction-pointer registers.
    IP = 12,
    /// Segment registers.
    SEGMENT = 13,
    /// Table registers.
    TABLE = 14,
    /// Test registers.
    TEST = 15,
    /// Control registers.
    CONTROL = 16,
    /// Debug registers.
    DEBUG = 17,
    /// Mask registers.
    MASK = 18,
    /// Bound registers.
    BOUND = 19,
}

pub const REGCLASS_MAX_VALUE: usize = 19;

/// Defines the `ZydisMemoryOperandType` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum MemoryOperandType {
    INVALID = 0,
    /// Normal memory operand.
    MEM = 1,
    /// The memory operand is only used for address-generation. No real
    /// memory-access is caused.
    AGEN = 2,
    /// A memory operand using `SIB` addressing form, where the index register
    /// is not used in address calculation and scale is ignored. No real
    /// memory-access is caused.
    MIB = 3,
    /// A vector `SIB` memory addressing operand (`VSIB`).
    VSIB = 4,
}

pub const MEMOP_TYPE_MAX_VALUE: usize = 4;

/// Defines the `ZydisBranchType` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum BranchType {
    /// The instruction is not a branch instruction.
    NONE = 0,
    /// The instruction is a short (8-bit) branch instruction.
    SHORT = 1,
    /// The instruction is a near (16-bit or 32-bit) branch instruction.
    NEAR = 2,
    /// The instruction is a far (inter-segment) branch instruction.
    FAR = 3,
}

pub const BRANCH_TYPE_MAX_VALUE: usize = 3;

/// Defines the `ZydisExceptionClass` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum ExceptionClass {
    NONE = 0,
    SSE1 = 1,
    SSE2 = 2,
    SSE3 = 3,
    SSE4 = 4,
    SSE5 = 5,
    SSE7 = 6,
    AVX1 = 7,
    AVX2 = 8,
    AVX3 = 9,
    AVX4 = 10,
    AVX5 = 11,
    AVX6 = 12,
    AVX7 = 13,
    AVX8 = 14,
    AVX11 = 15,
    AVX12 = 16,
    E1 = 17,
    E1NF = 18,
    E2 = 19,
    E2NF = 20,
    E3 = 21,
    E3NF = 22,
    E4 = 23,
    E4NF = 24,
    E5 = 25,
    E5NF = 26,
    E6 = 27,
    E6NF = 28,
    E7NM = 29,
    E7NM128 = 30,
    E9NF = 31,
    E10 = 32,
    E10NF = 33,
    E11 = 34,
    E11NF = 35,
    E12 = 36,
    E12NP = 37,
    K20 = 38,
    K21 = 39,
    AMXE1 = 40,
    AMXE2 = 41,
    AMXE3 = 42,
    AMXE4 = 43,
    AMXE5 = 44,
    AMXE6 = 45,
}

pub const EXCEPTION_CLASS_MAX_VALUE: usize = 45;

/// Defines the `ZydisMaskMode` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum MaskMode {
    INVALID = 0,
    /// Masking is disabled for the current instruction (`K0` register is used).
    DISABLED = 1,
    /// The embedded mask register is used as a merge-mask.
    MERGING = 2,
    /// The embedded mask register is used as a zero-mask.
    ZEROING = 3,
    /// The embedded mask register is used as a control-mask (element selector).
    CONTROL = 4,
    /// The embedded mask register is used as a zeroing control-mask (element
    /// selector).
    CONTROL_ZEROING = 5,
}

pub const MASK_MODE_MAX_VALUE: usize = 5;

/// Defines the `ZydisBroadcastMode` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum BroadcastMode {
    INVALID = 0,
    _1_TO_2 = 1,
    _1_TO_4 = 2,
    _1_TO_8 = 3,
    _1_TO_16 = 4,
    _1_TO_32 = 5,
    _1_TO_64 = 6,
    _2_TO_4 = 7,
    _2_TO_8 = 8,
    _2_TO_16 = 9,
    _4_TO_8 = 10,
    _4_TO_16 = 11,
    _8_TO_16 = 12,
}

pub const BROADCAST_MODE_MAX_VALUE: usize = 12;

/// Defines the `ZydisRoundingMode` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum RoundingMode {
    INVALID = 0,
    /// Round to nearest.
    RN = 1,
    /// Round down.
    RD = 2,
    /// Round up.
    RU = 3,
    /// Round towards zero.
    RZ = 4,
}

pub const ROUNDING_MODE_MAX_VALUE: usize = 4;

/// Defines the `ZydisSwizzleMode` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum SwizzleMode {
    INVALID = 0,
    DCBA = 1,
    CDAB = 2,
    BADC = 3,
    DACB = 4,
    AAAA = 5,
    BBBB = 6,
    CCCC = 7,
    DDDD = 8,
}

pub const SWIZZLE_MODE_MAX_VALUE: usize = 8;

/// Defines the `ZydisConversionMode` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum ConversionMode {
    INVALID = 0,
    FLOAT16 = 1,
    SINT8 = 2,
    UINT8 = 3,
    SINT16 = 4,
    UINT16 = 5,
}

pub const CONVERSION_MODE_MAX_VALUE: usize = 5;

/// Defines the `ZydisPrefixType` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum PrefixType {
    /// The prefix is ignored by the instruction.
    IGNORED = 0,
    /// The prefix is effectively used by the instruction.
    EFFECTIVE = 1,
    /// The prefix is used as a mandatory prefix.
    MANDATORY = 2,
}

pub const PREFIX_TYPE_MAX_VALUE: usize = 2;

/// Defines the `ZydisDecoderMode` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum DecoderMode {
    /// Enables minimal instruction decoding without semantic analysis.
    MINIMAL = 0,
    /// Enables the `AMD`-branch mode.
    AMD_BRANCHES = 1,
    /// Enables `KNC` compatibility-mode.
    KNC = 2,
    /// Enables the `MPX` mode.
    MPX = 3,
    /// Enables the `CET` mode.
    CET = 4,
    /// Enables the `LZCNT` mode.
    LZCNT = 5,
    /// Enables the `TZCNT` mode.
    TZCNT = 6,
    /// Enables the `WBNOINVD` mode.
    WBNOINVD = 7,
    /// Enables the `CLDEMOTE` mode.
    CLDEMOTE = 8,
}

pub const DECODER_MODE_MAX_VALUE: usize = 8;

/// Defines possible physical instruction encodings as bit flags, so multiple
/// acceptable encodings can be specified simultaneously.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum EncodableEncoding {
    DEFAULT = 0,
    LEGACY = 1,
    _3DNOW = 2,
    XOP = 4,
    VEX = 8,
    EVEX = 16,
    MVEX = 32,
}

pub const ENCODABLE_ENCODING_MAX_VALUE: usize = 63;

/// Defines encodable physical/effective sizes of relative immediate operands.
/// See `ZydisEncoderRequest.branch_width` for more details.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum BranchWidth {
    NONE = 0,
    _8 = 1,
    _16 = 2,
    _32 = 3,
    _64 = 4,
}

pub const BRANCH_WIDTH_MAX_VALUE: usize = 4;

/// Defines possible values for address size hints. See `ZydisEncoderRequest`
/// for more information about address size hints.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum AddressSizeHint {
    NONE = 0,
    _16 = 1,
    _32 = 2,
    _64 = 3,
}

pub const ADDRESS_SIZE_HINT_MAX_VALUE: usize = 3;

/// Defines possible values for operand size hints. See `ZydisEncoderRequest`
/// for more information about operand size hints.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum OperandSizeHint {
    NONE = 0,
    _8 = 1,
    _16 = 2,
    _32 = 3,
    _64 = 4,
}

pub const OPERAND_SIZE_HINT_MAX_VALUE: usize = 4;

/// Enum selecting the syntax to format the disassembly in.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum FormatterStyle {
    /// Generates `AT&T`-style disassembly.
    ATT = 0,
    /// Generates `Intel`-style disassembly.
    INTEL = 1,
    /// Generates `MASM`-style disassembly that is directly accepted as input
    /// for the `MASM` assembler.
    INTEL_MASM = 2,
}

pub const FORMATTER_STYLE_MAX_VALUE: usize = 2;

/// We wrap this in a nicer rust enum `FormatterProperty` already,
/// use that instead.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum ZydisFormatterProperty {
    /// Controls the printing of effective operand-size suffixes (`AT&T`) or
    /// operand-sizes of memory operands (`INTEL`).
    FORCE_SIZE = 0,
    /// Controls the printing of segment prefixes.
    FORCE_SEGMENT = 1,
    /// Controls the printing of the scale-factor component for memory operands.
    FORCE_SCALE_ONE = 2,
    /// Controls the printing of branch addresses.
    FORCE_RELATIVE_BRANCHES = 3,
    /// Controls the printing of `EIP`/`RIP`-relative addresses.
    FORCE_RELATIVE_RIPREL = 4,
    /// Controls the printing of branch-instructions sizes.
    PRINT_BRANCH_SIZE = 5,
    /// Controls the printing of instruction prefixes.
    DETAILED_PREFIXES = 6,
    /// Controls the base of address values.
    ADDR_BASE = 7,
    /// Controls the signedness of relative addresses. Absolute addresses are
    /// always unsigned.
    ADDR_SIGNEDNESS = 8,
    /// Controls the padding of absolute address values.
    ADDR_PADDING_ABSOLUTE = 9,
    /// Controls the padding of relative address values.
    ADDR_PADDING_RELATIVE = 10,
    /// Controls the base of displacement values.
    DISP_BASE = 11,
    /// Controls the signedness of displacement values.
    DISP_SIGNEDNESS = 12,
    /// Controls the padding of displacement values.
    DISP_PADDING = 13,
    /// Controls the base of immediate values.
    IMM_BASE = 14,
    /// Controls the signedness of immediate values.
    IMM_SIGNEDNESS = 15,
    /// Controls the padding of immediate values.
    IMM_PADDING = 16,
    /// Controls the letter-case for prefixes.
    UPPERCASE_PREFIXES = 17,
    /// Controls the letter-case for the mnemonic.
    UPPERCASE_MNEMONIC = 18,
    /// Controls the letter-case for registers.
    UPPERCASE_REGISTERS = 19,
    /// Controls the letter-case for typecasts.
    UPPERCASE_TYPECASTS = 20,
    /// Controls the letter-case for decorators.
    UPPERCASE_DECORATORS = 21,
    /// Controls the prefix for decimal values.
    DEC_PREFIX = 22,
    /// Controls the suffix for decimal values.
    DEC_SUFFIX = 23,
    /// Controls the letter-case of hexadecimal values.
    HEX_UPPERCASE = 24,
    /// Controls whether to prepend hexadecimal values with a leading zero if
    /// the first character is non-numeric.
    HEX_FORCE_LEADING_NUMBER = 25,
    /// Controls the prefix for hexadecimal values.
    HEX_PREFIX = 26,
    /// Controls the suffix for hexadecimal values.
    HEX_SUFFIX = 27,
}

pub const FORMATTER_PROP_MAX_VALUE: usize = 27;

/// Enum defining different mantissae to be used during formatting.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum NumericBase {
    /// Decimal system.
    DEC = 0,
    /// Hexadecimal system.
    HEX = 1,
}

pub const NUMERIC_BASE_MAX_VALUE: usize = 1;

/// Enum defining the signeness of integers to be used during formatting.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum Signedness {
    /// Automatically choose the most suitable mode based on the operands
    /// ZydisDecodedOperand.imm.is_signed` attribute.
    AUTO = 0,
    /// Force signed values.
    SIGNED = 1,
    /// Force unsigned values.
    UNSIGNED = 2,
}

pub const SIGNEDNESS_MAX_VALUE: usize = 2;

/// Enum definining magic values that receive special treatment when used as
/// padding properties of the formatter.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum Padding {
    /// Disables padding.
    DISABLED = 0,
    /// Padds the value to the current stack-width for addresses, or to the
    /// operand-width for immediate values (hexadecimal only).
    AUTO = -1,
}

/// Enum selecting a formatter function to be replaced with hooks.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum FormatterFunction {
    /// This function is invoked before the formatter formats an instruction.
    PRE_INSTRUCTION = 0,
    /// This function is invoked after the formatter formatted an instruction.
    POST_INSTRUCTION = 1,
    /// This function refers to the main formatting function.
    FORMAT_INSTRUCTION = 2,
    /// This function is invoked before the formatter formats an operand.
    PRE_OPERAND = 3,
    /// This function is invoked after the formatter formatted an operand.
    POST_OPERAND = 4,
    /// This function is invoked to format a register operand.
    FORMAT_OPERAND_REG = 5,
    /// This function is invoked to format a memory operand.
    FORMAT_OPERAND_MEM = 6,
    /// This function is invoked to format a pointer operand.
    FORMAT_OPERAND_PTR = 7,
    /// This function is invoked to format an immediate operand.
    FORMAT_OPERAND_IMM = 8,
    /// This function is invoked to print the instruction mnemonic.
    PRINT_MNEMONIC = 9,
    /// This function is invoked to print a register.
    PRINT_REGISTER = 10,
    /// This function is invoked to print absolute addresses.
    PRINT_ADDRESS_ABS = 11,
    /// This function is invoked to print relative addresses.
    PRINT_ADDRESS_REL = 12,
    /// This function is invoked to print a memory displacement value.
    PRINT_DISP = 13,
    /// This function is invoked to print an immediate value.
    PRINT_IMM = 14,
    /// This function is invoked to print the size of a memory operand (`INTEL`
    /// only).
    PRINT_TYPECAST = 15,
    /// This function is invoked to print the segment-register of a memory
    /// operand.
    PRINT_SEGMENT = 16,
    /// This function is invoked to print the instruction prefixes.
    PRINT_PREFIXES = 17,
    /// This function is invoked after formatting an operand to print a
    /// `EVEX`/`MVEX` decorator.
    PRINT_DECORATOR = 18,
}

pub const FORMATTER_FUNC_MAX_VALUE: usize = 18;

/// Enum of all decorator types.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum Decorator {
    INVALID = 0,
    /// The embedded-mask decorator.
    MASK = 1,
    /// The broadcast decorator.
    BC = 2,
    /// The rounding-control decorator.
    RC = 3,
    /// The suppress-all-exceptions decorator.
    SAE = 4,
    /// The register-swizzle decorator.
    SWIZZLE = 5,
    /// The conversion decorator.
    CONVERSION = 6,
    /// The eviction-hint decorator.
    EH = 7,
}

pub const DECORATOR_MAX_VALUE: usize = 7;

/// Defines the `ZydisInstructionSegment` struct.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum InstructionSegment {
    NONE = 0,
    /// The legacy prefixes (including ignored `REX` prefixes).
    PREFIXES = 1,
    /// The effective `REX` prefix byte.
    REX = 2,
    /// The `XOP` prefix bytes.
    XOP = 3,
    /// The `VEX` prefix bytes.
    VEX = 4,
    /// The `EVEX` prefix bytes.
    EVEX = 5,
    /// The `MVEX` prefix bytes.
    MVEX = 6,
    /// The opcode bytes.
    OPCODE = 7,
    /// The `ModRM` byte.
    MODRM = 8,
    /// The `SIB` byte.
    SIB = 9,
    /// The displacement bytes.
    DISPLACEMENT = 10,
    /// The immediate bytes.
    IMMEDIATE = 11,
}

pub const INSTR_SEGMENT_MAX_VALUE: usize = 11;

/// Defines the `ZydisFeature` enum.
#[cfg_attr(feature = "serialization", derive(Deserialize, Serialize))]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub enum Feature {
    DECODER = 0,
    ENCODER = 1,
    FORMATTER = 2,
    AVX512 = 3,
    KNC = 4,
    SEGMENT = 5,
}

pub const FEATURE_MAX_VALUE: usize = 4;
